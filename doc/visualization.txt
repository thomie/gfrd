

Setting up the simulation
-------------------------

* Setup the vtklogger like this in your simulation script (also see 
  \<egfrdDirectory\>/samples/example/example.py):

{% highlight python %}
s.initialize()
vtklogger = VTKLogger(s, '<mySimulationDataDirectory>')
while(True):
    try:
	vtklogger.log()
	s.step()
    except RuntimeError, message:
	print 'Error.', message
	break
vtklogger.stop()
s.stop(s.t)
{% endhighlight %}

* Replace '\<mySimulationDataDirectory\>' by a descriptive name for each 
  simulation that you run. It can be a nested directory structure, like 
  'data/10000steps/run1', and is automatically created inside the directory 
  that contains your simulation script.




Configuration options to VTKLogger
----------------------------------
{% highlight python %}
bufferSize=None  
{% endhighlight %}
By default the simulation data files are written directly during the 
simulation. By specifying a bufferSize, all data is stored in a buffer during 
the simulation, and the VTKLogger only writes the data for the last 
'bufferSize' simulation steps after the simulation has finished. 

{% highlight python %}
brownian=False  
{% endhighlight %}
If brownian is set to True, no shell data is written.

{% highlight python %}
extraParticleStep=True  
{% endhighlight %}
By default the VTKLogger writes 2 visualization steps for each simulation 
step. In the first visualization step only the active particle is updated, in 
the second visualization step the active shell is updated (and the next shell 
changes to blue). If extraParticleStep is set to False, these two steps are 
combined into one.  



Running the simulation
----------------------
* Run the simulation script. 

{% highlight python %}
PYTHONPATH=../../ python run.py
{% endhighlight %}

* This should produce the files static.pvd and files.pvd inside the 
  simulation data directory specified in your simulation script. The former 
  contains static information about the surfaces you defined in your 
  simulation. The latter contains a list of references to .vtu files. For each 
  timestep there is a .vtu file that contains information about the particles, 
  a .vtu file for the sphericle shells, and a .vtu file for all the 
  cylindrical shells.  

* When not using a buffer, i.e. option 2, the .vtu files are created during 
  the simulation. However, we have to wait for the simulation to finish before 
  we can visualize the data using Paraview. It is not till the call to 
  vtklogger.stop() that files.pvd is created with an overview of all .vtu 
  files. For this reason the visualization can not be shown real-time 
  at the moment.




Visualizing the data
--------------------
* In the file \<egfrdDirectory\>/paraview/visualization.py change the variable 
  paraview_scripts_directory to '\<egfrdDirectory\>/paraview' and the variable 
  simulation_data_directory to the location of your simulation data as 
  specified in your simulation script. These need to be absolute paths.

* Start Paraview.

* Go to Tools > Python Shell.

* Click 'Run Script'.

* Select \<egfrdDirectory\>/paraview/visualization.py.

* You should see a pipeline being build up.

* Click the play button. You should see an animation of your simulation. 




Rerunning a simulation
----------------------
* If you run a new simulation that writes to the same simulation data 
  directory, usually Paraview will reload the new data correctly. There can be 
  a problem if you increase or decrease the number of timesteps. If so, rerun 
  the Python script that builds the pipeline (see above).


